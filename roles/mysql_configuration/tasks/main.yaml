---
- name: create directories
  block:
    - name: datadir 
      ansible.builtin.file:
        path: "{{ datadir }}"
        state: directory
        owner: mysql
        group: mysql
        mode: '0751'
    - name: binlog dir 
      ansible.builtin.file:
        path: "{{ binlog_dir }}"
        state: directory
        owner: mysql
        group: mysql
        mode: '0751'
    - name: logging dir 
      ansible.builtin.file:
        path: "{{ error_log | dirname }}"
        state: directory
        owner: mysql
        group: mysql 
        mode: '0751'
      when: not error_log | regex_search("^\/var\/(log|lib)\/[a-zA-Z]+\.[a-zA-Z]*$")

- name: get configuration variables 
  block: 
    - name: buffer pool size 
      shell: free -m |grep Mem| awk '{print $2}'
      register: mem_total
- name: check if config file exists 
  stat: 
    path: "{{ config_file }}"
  register: default_config_file
- name: backup old configuration 
  block: 
    - name: copy file 
      copy: 
        remote_src: true 
        src: /etc/my.cnf 
        dest: /etc/my.cnf.OLD
        owner: mysql 
        group: mysql
        mode: '0600'
    - name: remove my.cnf
      ansible.builtin.file: 
        path: /etc/my.cnf
        state: absent
  when: default_config_file.stat.exists
# - name: debug 
  # debug:
    # msg: "{{ ((mem_total.stdout| int ) * 0.5 ) |int }}"
- name: Set MySQL Configurations 
  ansible.builtin.blockinfile:
    path: /etc/my.cnf
    create: yes
    owner: mysql 
    group: mysql
    mode: '0600'
    block: | 
    
      [mysqld]
      bind-address = 0.0.0.0
      socket = {{ socket }}
      datadir = {{ datadir }}
      lower-case-table-names = 1
      innodb-buffer-pool-size = {{ ((mem_total.stdout| int ) * 0.5 ) |int }}M
      log-error = {{ error_log }}

      # replication
      log-bin = {{ binlog_dir }}/{{ hostvars[inventory_hostname]['ansible_nodename'] }}
      expire-logs-days = {{ expire_log_days }}
      gtid-mode = on 
      enforce-gtid-consistency = on 
      server-id = {{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] | regex_replace('([0-9]{1,3}\.){2}([0-9]*)\.([0-9]*)$', '\2\3') }}

      [mysql]
      socket = {{ socket }}

