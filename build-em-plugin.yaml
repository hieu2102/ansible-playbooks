---
- hosts: oem
  gather_facts: no
  vars:
    code_directory: /Users/hieund/work/code/oracle/postgreSQL-emplugin/code
    staging: /Users/hieund/work/code/oracle/postgreSQL-emplugin/stage
    dist_dir: /Users/hieund/work/code/oracle/postgreSQL-emplugin/dist
    em_repo: "oracle-database.bnh.vn:1521/oem.bnh.vn"
    repo_user: sysman
    repo_password: oracle_4U
    target_types: [pgpool, pgsql]

  tasks:
    - name: Get project metadata
      block:
        - name: Get plugin current version
          shell: cat {{ code_directory }}/plugin.xml|grep PluginVersion|sed "s|[A-Za-z<>=\" /_]||g"
          register: plugin_version

        - name: Get agent plugin version
          shell: cat {{ code_directory }}/agent/plugin_registry.xml |grep "PlugIn.*Version" | awk '{print $NF}' | sed "s|[A-Za-z<>=\" /_]||g"
          register: agent_version

        - name: target type metadata version
          shell: cat {{ code_directory }}/oms/metadata/targetType/{{ item }}.xml | grep "TargetMetadata META_VER" |sed "s|[A-Za-z<>=\" /_]||g"
          register: targeta_metadata_version
          with_items: "{{ target_types }}"

        - name: default collection metadata version
          shell: cat {{ code_directory }}/oms/metadata/default_collection/{{ item }}.xml |grep "META_VER" |sed "s|[A-Za-z<>=\" /_]||g"
          register: collection_metadata_version
          with_items: "{{ target_types }}"
      when: inventory_hostname == 'dev'

    - name: Build plugin
      block:
        - name: Synchronize project content
          block:
            - name: Synchronize plugin version
              lineinfile:
                dest: "{{ code_directory }}/agent/plugin_registry.xml"
                regexp: '^(.*)"{{ agent_version.stdout }}"(.*)$'
                line: '\1"{{ plugin_version.stdout }}"\2'
                backrefs: true
              when: agent_version != plugin_version

        - name: Prep staging directory 
          block:
            - name: cleanup last staging
              block:
                - name: list files in staging 
                  shell: find {{ staging }}  -type f            
                  register: staging_file_list
                - name: cleanup 
                  file:
                    path: "{{ item }}"
                    state: absent
                  with_items: "{{ staging_file_list.stdout_lines }}"
            - name: populating staging dir
              block:
               - name: sync contents
                 synchronize:
                  src: "{{ code_directory }}/{{ item }}"
                  dest: "{{ staging }}" 
                 with_items:
                  - agent
                  - discovery
                  - plugin.xml
                  - oms
               - name: delete MPCUI src
                 block:
                  - name: delete
                    file:
                      path: "{{ staging }}/oms/metadata/mpcui/"
                      state: absent
                  - name: create directory 
                    file:
                      path: "{{ staging }}/oms/metadata/mpcui/"
                      state: directory
                
      when: inventory_hostname == "dev"
